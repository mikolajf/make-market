# Protocols
from typing import Protocol


class ConfigurationServiceProtocol(Protocol):
    def register_listener(self, listener: "ProducerProtocol") -> None: ...

    async def simulate_config_changes(self) -> None: ...


class ProducerProtocol(Protocol):
    async def connect(self) -> None: ...

    async def disconnect(self) -> None: ...

    async def produce(self) -> None: ...

    async def on_config_change(self, config: dict) -> None: ...


class ConsumerProtocol(Protocol):
    async def consume(self) -> None: ...

    async def get_data(self) -> int: ...
